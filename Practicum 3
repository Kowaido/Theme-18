    /// <summary>
    /// Абстрактный класс Figure
    /// </summary>
    abstract class Figure
    {
        /// <summary>
        /// Приватное поле name
        /// </summary>
        private string name;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Figure()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром
        /// </summary>
        /// <param name="name"></param>
        public Figure(string name)
        {
            this.name = name;
        }

        /// <summary>
        /// Свойство Name
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Абстрактный метод для вывода площади фигуры
        /// </summary>
        /// <returns></returns>
        public abstract double Area();
        /// <summary>
        /// Абстрактный метод для вывода периметра фигуры
        /// </summary>
        /// <returns></returns>
        public abstract double Perimetr();
        /// <summary>
        /// Виртуальный метод для вывода названия фигуры
        /// </summary>
        public virtual void Print()
        {
            Console.WriteLine($"Фигура: {Name}");
        }

    /// <summary>
    /// Класс Rectangle наследующийся от абстрактного класса Figure
    /// </summary>
    class Rectangle : Figure
    {
        /// <summary>
        /// Приватное поле side1
        /// </summary>
        private double side1;
        /// <summary>
        /// Приватное поле side2
        /// </summary>
        private double side2;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Rectangle()
        {

        }

        /// <summary>
        /// Конструктор с двумя параметрами данного класса, и одного из абстрктного.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="side1"></param>
        /// <param name="side2"></param>
        public Rectangle(string name, double side1, double side2)
            :base(name)
        {
            this.side1 = side1;
            this.side2 = side2;
        }

        /// <summary>
        /// Своство Side1
        /// </summary>
        public double Side1 { get; set; }
        /// <summary>
        /// Свойство Side2
        /// </summary>
        public double Side2 { get; set; }

        /// <summary>
        /// Метод для вывода площади Прямоугольника
        /// </summary>
        /// <returns></returns>
        public override double Area()
        {
            return side1 * side2;
        }
        /// <summary>
        /// Метод для вывода периметра Прямоугольник
        /// </summary>
        /// <returns></returns>
        public override double Perimetr()
        {
            return 2 * (side1 * side2);
        }

        /// <summary>
        /// Метод для вывода информации по фигуре.
        /// </summary>
        public override void Print()
        {
            base.Print();
            Console.WriteLine($"Стороны: {side1}, {side2}");
        }

    /// <summary>
    /// Класс Square наследующийся от класса Rectangle
    /// </summary>
    class Square : Rectangle
    {
        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Square()
        {

        }

        /// <summary>
        /// Конструктор с двумя параметрами базового класса, и одним из абстрактного
        /// </summary>
        /// <param name="name"></param>
        /// <param name="side1"></param>
        /// <param name="side2"></param>
        public Square(string name, double side1, double side2)
            :base(name, side1, side2)
        {

        }

        /// <summary>
        /// Метод для вывода площади Квадрата
        /// </summary>
        /// <returns></returns>
        public override double Area()
        {
            return Side1 * Side2;
        }

        /// <summary>
        /// Метод для вывода периметра Квадрата
        /// </summary>
        /// <returns></returns>
        public override double Perimetr()
        {
            return 2 * (Side1 * Side2);
        }

        /// <summary>
        /// Метод для вывода информации по фигуре.
        /// </summary>
        public override void Print()
        {
            base.Print();
            Console.WriteLine($"Стороны: {Side1}, {Side2}");
        }

    /// <summary>
    /// Класс наследуемый от абстрактного класса Figure
    /// </summary>
    class Triangle : Figure
    {
        /// <summary>
        /// Приватное поле side1
        /// </summary>
        private double side1;
        /// <summary>
        /// Приватное поле side2
        /// </summary>
        private double side2;
        /// <summary>
        /// Приватное поле side3
        /// </summary>
        private double side3;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Triangle()
        {

        }

        /// <summary>
        /// Конструктор с тремя параментрами данного класса, и с одним абстрактного.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="side1"></param>
        /// <param name="side2"></param>
        /// <param name="side3"></param>
        public Triangle(string name, double side1, double side2, double side3)
            :base(name)
        {
            if(side1<(side2+side3)||side2<(side1+side2))
            {
                this.side1 = side1;
                this.side2 = side2;
                this.side3 = side3;
            }
            else if(side1>(side2-side3)||side2>(side1-side3))
            {
                Console.WriteLine("Не возможно достигнуть подобного");
            }
        }

        /// <summary>
        /// Свойство Side1
        /// </summary>
        public double Side1 { get; set; }
        /// <summary>
        /// Свойство Side2
        /// </summary>
        public double Side2 { get; set; }
        /// <summary>
        /// Свойство Side3
        /// </summary>
        public double Side3 { get; set; }
        /// <summary>
        /// Метод выводящий площадь Треугольника
        /// </summary>
        /// <returns></returns>
        public override double Area()
        {
            double p = (side1 + side2 + side3) / 2.0;
            return Math.Sqrt(p * (p - side1) * (p - side2) * (p - side3));
        }
        /// <summary>
        /// Метод выводящий периметр Треугольника
        /// </summary>
        /// <returns></returns>
        public override double Perimetr()
        {
            return side1+side2+side3;
        }
        /// <summary>
        /// Метод для определния того, какой треугольник: равносторонний или равнобедренный
        /// </summary>
        /// <returns></returns>
        public new string GetType()
        {
            if (side1 == side3 && side1 == side2)
            {
                return "равносторонний";
            }
            else if (side1 == side3 || side1 == side2 || side3 == side2)
            {
                return "равнобедренный";
            }
            else
            {
                return "треугольник, как треугольник";
            }
        }
        /// <summary>
        /// Метод для вывода информации по фигуре
        /// </summary>
        public override void Print()
        {
            base.Print();
            GetType();
            Console.WriteLine($"Стороны: {side1}, {side2}, {side3}");
        }

    /// <summary>
    /// Класс Circle наследующийся от абстрактного класса Figure
    /// </summary>
    class Circle : Figure
    {
        /// <summary>
        /// Приватное поле x
        /// </summary>
        private double x;
        /// <summary>
        /// Приватное поле y
        /// </summary>
        private double y;
        /// <summary>
        /// Приватное поле r
        /// </summary>
        private double r;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Circle()
        {

        }

        /// <summary>
        /// Конструтор с тремя параметрами данного класса, и один из абстрактного
        /// </summary>
        /// <param name="name"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="r"></param>
        public Circle(string name, double x, double y, double r)
            : base(name)
        {
            this.x = x;
            this.y = y;
            this.r = r;
        }

        /// <summary>
        /// Свойство X
        /// </summary>
        public double X { get; set; }
        /// <summary>
        /// Свойство Y
        /// </summary>
        public double Y { get; set; }
        /// <summary>
        /// Свойство R
        /// </summary>
        public double R { get; set; }
        /// <summary>
        /// Метод для вывода окружности Круга
        /// </summary>
        /// <returns></returns>
        public override double Area()
        {
           return Math.PI * R * R;
        }

        /// <summary>
        /// Метод для вывода периметра Круга
        /// </summary>
        /// <returns></returns>
        public override double Perimetr()
        {
            return Math.PI * R * 2;
        }

        /// <summary>
        /// Метод для вывода информации по фигурам
        /// </summary>
        public override void Print()
        {
            base.Print();
            Console.WriteLine($"Стороны: {x}, {y}, {r}");
        }

static void Main(string[] args)
        {
            List<Figure> figur = new List<Figure>();
            Rectangle rect = new Rectangle();
            Square squr = new Square();
            Triangle triang = new Triangle();
            Circle circ = new Circle();
            bool flag = true;
            bool flag1 = false;
            bool flag2 = false;
            bool flag3 = false;
            bool flag4 = false;
            while(flag)
            {
                Console.WriteLine("Введите название фигуры: ");
                string name = Console.ReadLine();
                switch(name)
                {
                    case "прямоугольник":
                    case "ПРЯМОУГОЛЬНИК":
                    case "Прямоугольник":
                        Figure figure = new Rectangle();
                        figure.Name = name;
                        name = figure.Name;
                        Console.WriteLine("Ваша фигура выбрана, теперь вы можете ввести значения");
                        flag1 = true;
                        while(flag1)
                        {
                            Console.Write("Введите значение первой стороны: ");
                            double side1 = double.Parse(Console.ReadLine());
                            rect.Side1 = side1;
                            side1 = rect.Side1;
                            Console.Write("Введите значения второй стороны: ");
                            double side2 = double.Parse(Console.ReadLine());
                            rect.Side2 = side2;
                            side2 = rect.Side2;
                            rect.Area();
                            rect.Perimetr();
                            figure.Print();
                            rect.Print();
                            break;
                        }
                        flag1 = false;
                        break;

                    case "квадрат":
                    case "КВАДРАТ":
                    case "Квадрат":
                        Figure figure1 = new Square();
                        figure1.Name = name;
                        name = figure1.Name;
                        Console.WriteLine("Ваша фигура выбрана, теперь вы можете ввести значения");
                        flag4 = true;
                        while (flag4)
                        {
                            Console.Write("Введите значение первой стороны: ");
                            double side1 = double.Parse(Console.ReadLine());
                            squr.Side1 = side1;
                            side1 = squr.Side1;
                            Console.Write("Введите значение второй стороны: ");
                            double side2 = double.Parse(Console.ReadLine());
                            squr.Side2 = side2;
                            side2 = squr.Side2;
                            squr.Area();
                            squr.Perimetr();

                            squr.Print();
                            break;
                        }
                        flag4 = false;
                        break;

                    case "треугольник":
                    case "ТРЕУГОЛЬНИК":
                    case "Треугольник":
                        Figure figure2 = new Triangle();
                        figure2.Name = name;
                        name = figure2.Name;
                        Console.WriteLine("Ваша фигура выбрана, теперь вы можете ввести значения");
                        flag2 = true;
                        while (flag2)
                        {
                            Console.Write("Введите значение первой стороны: ");
                            double side1 = double.Parse(Console.ReadLine());
                            triang.Side1 = side1;
                            side1 = triang.Side1;
                            Console.Write("Введите значение второй стороны: ");
                            double side2 = double.Parse(Console.ReadLine());
                            triang.Side2 = side2;
                            side2 = triang.Side2;
                            Console.Write("Введите значение третей стороны:");
                            double side3 = double.Parse(Console.ReadLine());
                            triang.Side3 = side3;
                            side3 = triang.Side3;
                            triang.Area();
                            triang.Perimetr();
                            triang.GetType();
                            figure2.Print();
                            triang.Print();
                            break;
                        }
                        flag2 = false;
                       
                        break;

                    case "круг":
                    case "КРУГ":
                    case "Круг":
                        Figure figure3 = new Circle();
                        figure3.Name = name;
                        name = figure3.Name;
                        Console.WriteLine("Ваша фигура выбрана, теперь вы можете ввести значения");
                        flag3 = true;
                        while(flag3)
                        {
                            Console.Write("Введите значение координаты x: ");
                            double x = double.Parse(Console.ReadLine());
                            circ.X = x;
                            x = circ.X;
                            Console.Write("Введите значение координаты y: ");
                            double y = double.Parse(Console.ReadLine());
                            circ.Y = y;
                            y = circ.Y;
                            Console.Write("Введите значение радиуса: ");
                            double r = double.Parse(Console.ReadLine());
                            circ.R = r;
                            r = circ.R;
                            circ.Area();
                            circ.Perimetr();
                            figure3.Print();
                            circ.Print();
                            break;
                        }
                        Console.ReadKey();
                        flag3 = false;
                        flag = false;
                        break;
                }
