{
    /// <summary>
    /// Абстрактный класс Goods
    /// </summary>
    abstract class Goods
    {
        /// <summary>
        /// Свойство поля Name
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Свойство поля Price
        /// </summary>
        public int Price { get; set; }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Goods()
        {

        }

        /// <summary>
        /// Конструктор с двумя параметрами
        /// </summary>
        /// <param name="name"></param>
        /// <param name="price"></param>
        public Goods(string name, int price)
        {
            Name = name;
            Price = price;
        }

        /// <summary>
        /// Абстрактный метод выводящий информацию о сроке годности
        /// </summary>
        /// <returns></returns>
        public abstract void DedlineExpationDate();

        /// <summary>
        /// Метод для вывода информации о товаре
        /// </summary>
        public static void Info()
        {
            Product.InputInfo(new Product());
            Party.InputInfo(new Party());
            Kit.InputInfo(new Kit());
        }
    }
}

{
    /// <summary>
    /// Класс Product наследующийся от абстрактного класса Goods
    /// </summary>
    class Product : Goods
    {
        /// <summary>
        /// Свойство поля ExparitionDate
        /// </summary>
        public DateTime ExparitionDate { get; set; }

        /// <summary>
        /// Свойство поля ProductionDate
        /// </summary>
        public int ProductionDate { get; set; }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Product()
        {

        }

        /// <summary>
        /// Конструктор двумя параметрами данного класса, и двумя из базового класса
        /// </summary>
        /// <param name="name"></param>
        /// <param name="price"></param>
        /// <param name="expirationdate"></param>
        /// <param name="productiondate"></param>
        public Product(string name, int price, DateTime expirationdate, int productiondate)
            :base(name, price)
        {
            ExparitionDate = expirationdate;
            ProductionDate = productiondate;
        }

        /// <summary>
        /// Метод для вывода Срока даты-товара
        /// </summary>
        /// <returns></returns>
        public override void DedlineExpationDate()
        {
            ProductionDate = DateTime.Now.Year - ExparitionDate.Date.Year;
            if(DateTime.Now<ExparitionDate.Date.AddDays(ProductionDate))
            {
                ProductionDate--;
            }
            else if(DateTime.Now>ExparitionDate.Date.AddDays(ProductionDate))
            {
                ProductionDate++;
            }
        }

        /// <summary>
        /// Метод для вывода информации о товаре
        /// </summary>
        public static Product InputInfo(Product staff)
        {
            Console.WriteLine("Введите имя товара: ");
            staff.Name = Console.ReadLine();
            Console.WriteLine("Введите цену товара: ");
            staff.Price = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите дату производства: ");
            staff.ExparitionDate = DateTime.Parse(Console.ReadLine());
            Console.WriteLine("Введите срок-годности: ");
            staff.ProductionDate = int.Parse(Console.ReadLine());
            Console.WriteLine($"Название: {staff.Name} \nЦена: {staff.Price}" +
            $"\n Дата-производства: {staff.ExparitionDate}\n Срок-годности: {staff.ProductionDate}");
            staff.DedlineExpationDate();
            return new Product(staff.Name, staff.Price, staff.ExparitionDate, staff.ProductionDate);
        }
    }
}

{
    /// <summary>
    /// Класс Party наследующийся от абстрактного класса Goods
    /// </summary>
    class Party : Goods
    {
        /// <summary>
        /// Свойство поля Count
        /// </summary>
        public int Count { get; set; }

        /// <summary>
        /// Свойство поля ExparitionDate
        /// </summary>
        public DateTime ExparitionDate { get; set; }

        /// <summary>
        /// Свойство поля ProductionDate
        /// </summary>
        public int ProductionDate { get; set; }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Party()
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами данного класса, и двумя из базового класса
        /// </summary>
        /// <param name="name"></param>
        /// <param name="price"></param>
        /// <param name="count"></param>
        /// <param name="expirationdate"></param>
        /// <param name="productiondate"></param>
        public Party(string name, int price, int count, DateTime expirationdate, int productiondate)
            : base(name, price)
        {
            Count = count;
            ExparitionDate = expirationdate;
            ProductionDate = productiondate;
        }

        /// <summary>
        /// Метод для определения Срока даты-производства
        /// </summary>
        public override void DedlineExpationDate()
        {
            ProductionDate = DateTime.Now.Year - ExparitionDate.Date.Year;
            if (DateTime.Now < ExparitionDate.Date.AddDays(ProductionDate))
            {
                ProductionDate--;
            }
            else if (DateTime.Now > ExparitionDate.Date.AddDays(ProductionDate))
            {
                ProductionDate++;
            }
        }

        /// <summary>
        /// Метод для вывода информации о Партии
        /// </summary>
        /// <param name="staff"></param>
        public static Party InputInfo(Party staff)
        {
            Console.WriteLine("Введите название товара: ");
            staff.Name = Console.ReadLine();
            Console.WriteLine("Введите цену товара: ");
            staff.Price = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество: ");
            staff.Count = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите дату производства: ");
            staff.ExparitionDate = DateTime.Parse(Console.ReadLine());
            Console.WriteLine("Введите срок-годности: ");
            staff.ProductionDate = int.Parse(Console.ReadLine());
            Console.WriteLine($"Название: {staff.Name} \nЦена: {staff.Price} \nКоличество: {staff.Count}" +
            $"\n Дата-производства: {staff.ExparitionDate}\n Срок-годности: {staff.ProductionDate}");
            staff.DedlineExpationDate();
            return new Party(staff.Name, staff.Price, staff.Count, staff.ExparitionDate, staff.ProductionDate);
        }
    }
}

{
    /// <summary>
    /// Класс Kit наследующийся от абстрактного класса Goods
    /// </summary>
    class Kit : Goods
    {
        /// <summary>
        /// Свойство поля Products
        /// </summary>
        public string Products { get; set; }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Kit()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром данного класса, и двумя из базового класса
        /// </summary>
        /// <param name="name"></param>
        /// <param name="price"></param>
        /// <param name="products"></param>
        public Kit(string name, int price, string products)
            :base(name, price)
        {
            Products = products;
        }

        /// <summary>
        /// Метод для вывода Срока даты-производства
        /// </summary>
        public override void DedlineExpationDate()
        {
            
        }

        /// <summary>
        /// Метод для вывода информации о названии набора
        /// </summary>
        /// <param name="staff"></param>
        public static Kit InputInfo(Kit staff)
        {
            Console.WriteLine("Введите название набора: ");
            staff.Name = Console.ReadLine();
            Console.WriteLine("Введите цену набора: ");
            staff.Price = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите колличество продуктов: ");
            int n = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите продукты которые у вас присутствуют: ");
            Console.WriteLine($"Название: {staff.Name} \nЦена: {staff.Price} \nПродукты: \nтовар - {staff.Products}");
            return new Kit(staff.Name, staff.Price, staff.Products);
        }
    }
}

{
    class Program
    {
        static void Main(string[] args)
        {
            Product staff = new Product();
            Party staff1 = new Party();
            Kit staff2 = new Kit();
            int data = 0;
            int schet = 0;
            Console.Write("Введите количество товаров: ");
            int n = int.Parse(Console.ReadLine());
            List<Goods> staffs = new List<Goods>();
            staffs.Add(staff);
            staffs.Add(staff1);
            staffs.Add(staff2);

            bool flag = true;
            while (flag)
            {
                Console.WriteLine("Выберите один из трёх вариантов: ");
                Console.WriteLine("Вам представлены: \tПродукты, \tПартия, " +
                    "\tКомплекты-продуктов");
                string choise = Console.ReadLine();

                switch (choise)
                {
                    case "Продукты":
                    case "продукты":
                        Console.WriteLine($"Вами были выбраны {choise}");
                        Console.WriteLine("Теперь вы можете ввести данные по продуктам ");
                        staffs.Add(new Product());
                        Product.InputInfo(staff);
                        Console.WriteLine("Хотите продолжить? ");
                        string choises = Console.ReadLine();
                        if (choises == "Да" || choises == "да")
                        {
                            Console.WriteLine("Вы выбрали продолжить");
                            if (schet >= 0 && schet == n)
                            {
                                schet++;
                                continue;
                            }

                            if(schet == n)
                            {
                                Console.WriteLine("Вы достигли максимального число");
                            }
                            
                        }

                        else if(choises == "Нет" || choises == "нет")
                        {
                            Console.WriteLine("Вы выбрали завершить");
                            break;
                        }
                        break;

                    case "Партия":
                    case "партия":
                        Console.WriteLine($"Вами была выбрана {choise}");
                        Console.WriteLine("Теперь вы можете ввести данные по Партии ");
                        staffs.Add(new Party());
                        Party.InputInfo(staff1);
                            staff1.DedlineExpationDate();
                             Console.WriteLine("Хотите продолжить? ");
                        choises = Console.ReadLine();
                        if (choises == "Да" || choises == "да")
                        {
                            Console.WriteLine("Вы выбрали продолжить");
                            if (schet >= 0 && schet == n)
                            {
                                schet++;
                                continue;
                            }

                            if (schet == n)
                            {
                                Console.WriteLine("Вы достигли максимального число");
                            }
                        }

                        else if(choises == "Нет" || choises == "нет")
                        {
                            Console.WriteLine("Вы выбрали завершить");
                            break;
                        }
                        break;

                    case "Комплекты-продуктов":
                    case "комплекты-продуктов":
                        Console.WriteLine($"Вами был выбран {choise}");
                        Console.WriteLine("Теперь вы можете ввести данные по Комплекту-продуктов");
                        staffs.Add(new Party());
                        Kit.InputInfo(staff2);
                        Console.WriteLine("Хотите продолжить? ");
                        choises = Console.ReadLine();
                        if (choises == "Да" || choises == "да")
                        {
                           Console.WriteLine("Вы выбрали продолжить");
                            if (schet >= 0 && schet == n)
                            {
                                schet++;
                                continue;
                            }

                            if (schet == n)
                            {
                                Console.WriteLine("Вы достигли максимального число");
                            }
                        }

                        else if (choises == "Нет" || choises == "нет")
                        {
                           Console.WriteLine("Вы выбрали завершить");
                           break;
                        }
                            Console.ReadKey();
                        break;
                }
                flag = false;
                break;
              }

            if(DateTime.Now < staff.ExparitionDate)
            {
                staff.ProductionDate = data;
                Console.WriteLine($"Просроченый товар {staff.Name}");
            }

            else if (DateTime.Now > staff.ExparitionDate)
            {
                Console.WriteLine($"Товар не просрочен {staff.Name}");
            }

            else if (DateTime.Now < staff1.ExparitionDate)
            {
                Console.WriteLine($"Просроченый товар {staff.Name}");
            }

            else if (DateTime.Now > staff1.ExparitionDate)
            {
                Console.WriteLine($"Товар не просрочен {staff.Name}");
            }
           }
        }
    }
